#import "MBMessage.h"

int main() {
    @autoreleasepool {
        // Complete second message from the buffer (starting at offset 164/0xa4)
        uint8_t msg2[] = {
            0x6c, 0x01, 0x00, 0x01, 0xa1, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // Header
            0x79, 0x00, 0x00, 0x00, // Fields length: 121 bytes
            // Header fields (121 bytes)
            0x01, 0x01, 0x6f, 0x00, 0x15, 0x00, 0x00, 0x00, 0x2f, 0x6f, 0x72, 0x67,
            0x2f, 0x66, 0x72, 0x65, 0x65, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70,
            0x2f, 0x44, 0x42, 0x75, 0x73, 0x00, 0x00, 0x00, 0x02, 0x01, 0x73, 0x00,
            0x14, 0x00, 0x00, 0x00, 0x6f, 0x72, 0x67, 0x2e, 0x66, 0x72, 0x65, 0x65,
            0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x2e, 0x44, 0x42, 0x75, 0x73,
            0x00, 0x00, 0x00, 0x00, 0x06, 0x01, 0x73, 0x00, 0x14, 0x00, 0x00, 0x00,
            0x6f, 0x72, 0x67, 0x2e, 0x66, 0x72, 0x65, 0x65, 0x64, 0x65, 0x73, 0x6b,
            0x74, 0x6f, 0x70, 0x2e, 0x44, 0x42, 0x75, 0x73, 0x00, 0x00, 0x00, 0x00,
            0x08, 0x01, 0x67, 0x00, 0x01, 0x73, 0x00, 0x00, 0x03, 0x01, 0x73, 0x00,
            0x08, 0x00, 0x00, 0x00, 0x41, 0x64, 0x64, 0x4d, 0x61, 0x74, 0x63, 0x68,
            0x00, 0x00, 0x00, 0x00,
            // Body padding (to 8-byte alignment)
            0x00, 0x00, 0x00, 0x00,
            // Body (161 bytes) - AddMatch string
            0x9c, 0x00, 0x00, 0x00, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x27, 0x73, 0x69,
            0x67, 0x6e, 0x61, 0x6c, 0x27, 0x2c, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72,
            0x3d, 0x27, 0x6f, 0x72, 0x67, 0x2e, 0x78, 0x66, 0x63, 0x65, 0x2e, 0x58,
            0x66, 0x63, 0x6f, 0x6e, 0x66, 0x27, 0x2c, 0x69, 0x6e, 0x74, 0x65, 0x72,
            0x66, 0x61, 0x63, 0x65, 0x3d, 0x27, 0x6f, 0x72, 0x67, 0x2e, 0x66, 0x72,
            0x65, 0x65, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x2e, 0x44, 0x42,
            0x75, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
            0x73, 0x27, 0x2c, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x3d, 0x27, 0x50,
            0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x43, 0x68, 0x61,
            0x6e, 0x67, 0x65, 0x64, 0x27, 0x2c, 0x70, 0x61, 0x74, 0x68, 0x3d, 0x27,
            0x2f, 0x6f, 0x72, 0x67, 0x2f, 0x78, 0x66, 0x63, 0x65, 0x2f, 0x58, 0x66,
            0x63, 0x6f, 0x6e, 0x66, 0x27, 0x2c, 0x61, 0x72, 0x67, 0x30, 0x3d, 0x27,
            0x6f, 0x72, 0x67, 0x2e, 0x78, 0x66, 0x63, 0x65, 0x2e, 0x58, 0x66, 0x63,
            0x6f, 0x6e, 0x66, 0x27, 0x00  // null terminator
        };
        
        NSData *msg2Data = [NSData dataWithBytes:msg2 length:sizeof(msg2)];
        NSLog(@"Testing complete second message (%lu bytes)", [msg2Data length]);
        
        // Check minimum length
        NSLog(@"Header: endian=0x%02x type=%d flags=%d version=%d", 
              msg2[0], msg2[1], msg2[2], msg2[3]);
        uint32_t bodyLen = *(uint32_t*)(msg2 + 4);
        uint32_t serial = *(uint32_t*)(msg2 + 8); 
        uint32_t fieldsLen = *(uint32_t*)(msg2 + 12);
        NSLog(@"Header: bodyLen=%u serial=%u fieldsLen=%u", bodyLen, serial, fieldsLen);
        
        NSUInteger expectedLen = 16 + fieldsLen + ((fieldsLen + 7) & ~7) + bodyLen - fieldsLen;
        NSLog(@"Expected total length: %lu, actual: %lu", expectedLen, [msg2Data length]);
        
        NSUInteger offset = 0;
        MBMessage *parsed = [MBMessage messageFromData:msg2Data offset:&offset];
        
        if (parsed) {
            NSLog(@"SUCCESS: Second message parsed, type=%d serial=%lu", (int)parsed.type, parsed.serial);
            NSLog(@"         Member: %@", parsed.member);
        } else {
            NSLog(@"FAILED: Could not parse second message");
        }
    }
    return 0;
}

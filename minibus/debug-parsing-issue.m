#import <Foundation/Foundation.h>
#import "MBMessage.h"

int main(int argc, char *argv[]) {
    @autoreleasepool {
        printf("Testing multi-message parsing...\n");
        
        // Create a buffer with two messages
        NSMutableData *multiBuffer = [NSMutableData data];
        
        // First message (Hello)
        uint8_t msg1[] = {
            0x6c, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x6e, 0x00, 0x00, 0x00,
            0x01, 0x01, 0x6f, 0x00, 0x15, 0x00, 0x00, 0x00, 0x2f, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x72, 0x65,
            0x65, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x2f, 0x44, 0x42, 0x75, 0x73, 0x00, 0x00, 0x00,
            0x02, 0x01, 0x73, 0x00, 0x14, 0x00, 0x00, 0x00, 0x6f, 0x72, 0x67, 0x2e, 0x66, 0x72, 0x65, 0x65,
            0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x2e, 0x44, 0x42, 0x75, 0x73, 0x00, 0x00, 0x00, 0x00,
            0x06, 0x01, 0x73, 0x00, 0x14, 0x00, 0x00, 0x00, 0x6f, 0x72, 0x67, 0x2e, 0x66, 0x72, 0x65, 0x65,
            0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x2e, 0x44, 0x42, 0x75, 0x73, 0x00, 0x00, 0x00, 0x00,
            0x03, 0x01, 0x73, 0x00, 0x05, 0x00, 0x00, 0x00, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x00, 0x00, 0x00
        };
        
        // Second message (GetNameOwner)  
        uint8_t msg2[] = {
            0x6c, 0x01, 0x00, 0x01, 0x14, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x7d, 0x00, 0x00, 0x00,
            0x01, 0x01, 0x6f, 0x00, 0x15, 0x00, 0x00, 0x00, 0x2f, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x72, 0x65,
            0x65, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x2f, 0x44, 0x42, 0x75, 0x73, 0x00, 0x00, 0x00,
            0x02, 0x01, 0x73, 0x00, 0x14, 0x00, 0x00, 0x00, 0x6f, 0x72, 0x67, 0x2e, 0x66, 0x72, 0x65, 0x65,
            0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x2e, 0x44, 0x42, 0x75, 0x73, 0x00, 0x00, 0x00, 0x00,
            0x06, 0x01, 0x73, 0x00, 0x14, 0x00, 0x00, 0x00, 0x6f, 0x72, 0x67, 0x2e, 0x66, 0x72, 0x65, 0x65,
            0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x2e, 0x44, 0x42, 0x75, 0x73, 0x00, 0x00, 0x00, 0x00,
            0x08, 0x01, 0x67, 0x00, 0x01, 0x73, 0x00, 0x00, 0x03, 0x01, 0x73, 0x00, 0x0c, 0x00, 0x00, 0x00,
            0x47, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x00, 0x00, 0x00, 0x00,
            0x0f, 0x00, 0x00, 0x00, 0x6f, 0x72, 0x67, 0x2e, 0x78, 0x66, 0x63, 0x65, 0x2e, 0x58, 0x66, 0x63,
            0x6f, 0x6e, 0x66, 0x00
        };
        
        [multiBuffer appendBytes:msg1 length:sizeof(msg1)];
        [multiBuffer appendBytes:msg2 length:sizeof(msg2)];
        
        printf("Multi-message buffer length: %lu bytes\n", (unsigned long)[multiBuffer length]);
        printf("First message length: %lu bytes\n", (unsigned long)sizeof(msg1));
        printf("Second message length: %lu bytes\n", (unsigned long)sizeof(msg2));
        
        // Parse multiple messages
        NSArray *messages = [MBMessage messagesFromData:multiBuffer];
        
        printf("Parsed %lu messages\n", (unsigned long)[messages count]);
        
        for (NSUInteger i = 0; i < [messages count]; i++) {
            MBMessage *message = [messages objectAtIndex:i];
            printf("\nMessage %lu:\n", (unsigned long)i);
            printf("  Type: %d\n", (int)message.type);
            printf("  Serial: %lu\n", (unsigned long)message.serial);
            printf("  Destination: %s\n", message.destination ? [message.destination UTF8String] : "(null)");
            printf("  Interface: %s\n", message.interface ? [message.interface UTF8String] : "(null)");
            printf("  Member: %s\n", message.member ? [message.member UTF8String] : "(null)");
            printf("  Path: %s\n", message.path ? [message.path UTF8String] : "(null)");
            printf("  Signature: %s\n", message.signature ? [message.signature UTF8String] : "(null)");
        }
    }
    
    return 0;
}
